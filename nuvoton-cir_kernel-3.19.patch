--- 319a/drivers/media/rc/nuvoton-cir.c	2015-02-13 23:03:35.658682347 +0100
+++ 319b/drivers/media/rc/nuvoton-cir.c	2015-02-13 23:27:53.522688136 +0100
@@ -263,6 +263,13 @@
 		if (chip_minor != CHIP_ID_LOW_677C)
 			chip_unknown = true;
 		break;
+	case CHIP_ID_HIGH_6683:
+		strcpy(chip_id, "ntc6683d-t\0");
+		if (chip_minor != CHIP_ID_LOW_6683A &&
+		    chip_minor != CHIP_ID_LOW_6683B)
+			chip_unknown = true;
+		nvt->disable_wake = 1;
+		break;
 	default:
 		strcpy(chip_id, "w836x7hg\0");
 		chip_unknown = true;
@@ -329,6 +336,9 @@
 	/* Enable CIR Wake via PSOUT# (Pin60) */
 	nvt_set_reg_bit(nvt, CIR_WAKE_ENABLE_BIT, CR_ACPI_CIR_WAKE);
 
+	/* enable cir interrupt of mouse/keyboard IRQ event */
+	nvt_set_reg_bit(nvt, CIR_INTR_MOUSE_IRQ_BIT, CR_ACPI_IRQ_EVENTS);
+
 	/* enable pme interrupt of cir wakeup event */
 	nvt_set_reg_bit(nvt, PME_INTR_CIR_PASS_BIT, CR_ACPI_IRQ_EVENTS2);
 
@@ -452,6 +462,7 @@
 
 	nvt_select_logical_dev(nvt, LOGICAL_DEV_ACPI);
 	nvt_set_reg_bit(nvt, CIR_WAKE_ENABLE_BIT, CR_ACPI_CIR_WAKE);
+	nvt_set_reg_bit(nvt, CIR_INTR_MOUSE_IRQ_BIT, CR_ACPI_IRQ_EVENTS);
 	nvt_set_reg_bit(nvt, PME_INTR_CIR_PASS_BIT, CR_ACPI_IRQ_EVENTS2);
 
 	nvt_select_logical_dev(nvt, LOGICAL_DEV_CIR_WAKE);
@@ -1004,16 +1015,19 @@
 
 	if (!pnp_port_valid(pdev, 1) ||
 	    pnp_port_len(pdev, 1) < CIR_IOREG_LENGTH) {
-		dev_err(&pdev->dev, "Wake PNP Port not valid!\n");
-		goto exit_free_dev_rdev;
+		nvt->disable_wake = 1;
+		//dev_err(&pdev->dev, "Wake PNP Port not valid!\n");
+		//goto exit_free_dev_rdev;
 	}
 
 	nvt->cir_addr = pnp_port_start(pdev, 0);
 	nvt->cir_irq  = pnp_irq(pdev, 0);
 
-	nvt->cir_wake_addr = pnp_port_start(pdev, 1);
-	/* irq is always shared between cir and cir wake */
-	nvt->cir_wake_irq  = nvt->cir_irq;
+	if (!nvt->disable_wake){
+		nvt->cir_wake_addr = pnp_port_start(pdev, 1);
+		/* irq is always shared between cir and cir wake */
+		nvt->cir_wake_irq  = nvt->cir_irq;
+	}
 
 	nvt->cr_efir = CR_EFIR;
 	nvt->cr_efdr = CR_EFDR;
@@ -1033,12 +1047,14 @@
 	/* Initialize CIR & CIR Wake Logical Devices */
 	nvt_efm_enable(nvt);
 	nvt_cir_ldev_init(nvt);
-	nvt_cir_wake_ldev_init(nvt);
+	if (!nvt->disable_wake)	
+		nvt_cir_wake_ldev_init(nvt);
 	nvt_efm_disable(nvt);
 
 	/* Initialize CIR & CIR Wake Config Registers */
 	nvt_cir_regs_init(nvt);
-	nvt_cir_wake_regs_init(nvt);
+	if (!nvt->disable_wake)	
+		nvt_cir_wake_regs_init(nvt);
 
 	/* Set up the rc device */
 	rdev->priv = nvt;
@@ -1048,7 +1064,7 @@
 	rdev->close = nvt_close;
 	rdev->tx_ir = nvt_tx_ir;
 	rdev->s_tx_carrier = nvt_set_tx_carrier;
-	rdev->input_name = "Nuvoton w836x7hg Infrared Remote Transceiver";
+	rdev->input_name = "Nuvoton w8xxx Infrared Remote Transceiver";
 	rdev->input_phys = "nuvoton/cir0";
 	rdev->input_id.bustype = BUS_HOST;
 	rdev->input_id.vendor = PCI_VENDOR_ID_WINBOND2;
@@ -1082,20 +1098,23 @@
 			NVT_DRIVER_NAME, (void *)nvt))
 		goto exit_release_cir_addr;
 
-	if (!request_region(nvt->cir_wake_addr,
-			    CIR_IOREG_LENGTH, NVT_DRIVER_NAME))
-		goto exit_free_irq;
-
-	if (request_irq(nvt->cir_wake_irq, nvt_cir_wake_isr, IRQF_SHARED,
-			NVT_DRIVER_NAME, (void *)nvt))
-		goto exit_release_cir_wake_addr;
+	if (!nvt->disable_wake){
+		if (!request_region(nvt->cir_wake_addr,
+				    CIR_IOREG_LENGTH, NVT_DRIVER_NAME))
+			goto exit_free_irq;
+
+		if (request_irq(nvt->cir_wake_irq, nvt_cir_wake_isr, IRQF_SHARED,
+				NVT_DRIVER_NAME, (void *)nvt))
+			goto exit_release_cir_wake_addr;
 
-	device_init_wakeup(&pdev->dev, true);
+		device_init_wakeup(&pdev->dev, true);
+	}
 
 	nvt_pr(KERN_NOTICE, "driver has been successfully loaded\n");
 	if (debug) {
 		cir_dump_regs(nvt);
-		cir_wake_dump_regs(nvt);
+		if (!nvt->disable_wake)
+			cir_wake_dump_regs(nvt);
 	}
 
 	return 0;
@@ -1126,14 +1145,17 @@
 	nvt_cir_reg_write(nvt, 0, CIR_IREN);
 	nvt_disable_cir(nvt);
 	/* enable CIR Wake (for IR power-on) */
-	nvt_enable_wake(nvt);
+	if (!nvt->disable_wake)
+		nvt_enable_wake(nvt);
 	spin_unlock_irqrestore(&nvt->nvt_lock, flags);
 
 	/* free resources */
 	free_irq(nvt->cir_irq, nvt);
-	free_irq(nvt->cir_wake_irq, nvt);
+	if (!nvt->disable_wake)
+		free_irq(nvt->cir_wake_irq, nvt);
 	release_region(nvt->cir_addr, CIR_IOREG_LENGTH);
-	release_region(nvt->cir_wake_addr, CIR_IOREG_LENGTH);
+	if (!nvt->disable_wake)
+		release_region(nvt->cir_wake_addr, CIR_IOREG_LENGTH);
 
 	rc_unregister_device(nvt->rdev);
 
@@ -1169,7 +1191,8 @@
 	nvt_efm_disable(nvt);
 
 	/* make sure wake is enabled */
-	nvt_enable_wake(nvt);
+	if (!nvt->disable_wake)
+		nvt_enable_wake(nvt);
 
 	return 0;
 }
@@ -1191,7 +1214,8 @@
 	nvt_efm_disable(nvt);
 
 	nvt_cir_regs_init(nvt);
-	nvt_cir_wake_regs_init(nvt);
+	if (!nvt->disable_wake)
+		nvt_cir_wake_regs_init(nvt);
 
 	return 0;
 }
@@ -1199,12 +1223,14 @@
 static void nvt_shutdown(struct pnp_dev *pdev)
 {
 	struct nvt_dev *nvt = pnp_get_drvdata(pdev);
-	nvt_enable_wake(nvt);
+	if (!nvt->disable_wake)
+		nvt_enable_wake(nvt);
 }
 
 static const struct pnp_device_id nvt_ids[] = {
 	{ "WEC0530", 0 },   /* CIR */
 	{ "NTN0530", 0 },   /* CIR for new chip's pnp id*/
+	{ "NTN0533", 0 },   /* CIR for 6683B chip, no CIR Wake */
 	{ "", 0 },
 };
 
@@ -1233,7 +1259,7 @@
 MODULE_PARM_DESC(debug, "Enable debugging output");
 
 MODULE_DEVICE_TABLE(pnp, nvt_ids);
-MODULE_DESCRIPTION("Nuvoton W83667HG-A & W83677HG-I CIR driver");
+MODULE_DESCRIPTION("Nuvoton W83667HG-A & W83677HG-I & NCT6683 CIR driver");
 
 MODULE_AUTHOR("Jarod Wilson <jarod@redhat.com>");
 MODULE_LICENSE("GPL");
--- 319a/drivers/media/rc/nuvoton-cir.h	2015-02-13 23:03:39.314682362 +0100
+++ 319b/drivers/media/rc/nuvoton-cir.h	2015-02-13 23:30:27.246688746 +0100
@@ -86,7 +86,10 @@
 	/* EFER Config register index/data pair */
 	u32 cr_efir;
 	u32 cr_efdr;
-
+	
+	/* don't use CIR wake device */
+	int disable_wake;
+	
 	/* hardware I/O settings */
 	unsigned long cir_addr;
 	unsigned long cir_wake_addr;
@@ -143,6 +146,7 @@
 
 /* total length of CIR and CIR WAKE */
 #define CIR_IOREG_LENGTH	0x0f
+#define CIR_IOREG_LENGTH_B	0x04
 
 /* RX limit length, 8 high bits for SLCH, 8 low bits for SLCL (0x7d0 = 2000) */
 #define CIR_RX_LIMIT_COUNT	0x7d0
@@ -330,10 +334,13 @@
 #define CHIP_ID_HIGH_667	0xa5
 #define CHIP_ID_HIGH_677B	0xb4
 #define CHIP_ID_HIGH_677C	0xc3
+#define CHIP_ID_HIGH_6683	0xc7 //bri
 #define CHIP_ID_LOW_667		0x13
 #define CHIP_ID_LOW_677B2	0x72
 #define CHIP_ID_LOW_677B3	0x73
 #define CHIP_ID_LOW_677C	0x33
+#define CHIP_ID_LOW_6683A	0x31 //bri
+#define CHIP_ID_LOW_6683B	0x32 //bri
 
 /* Config regs we need to care about */
 #define CR_SOFTWARE_RESET	0x02
@@ -363,6 +370,7 @@
 #define LOGICAL_DEV_ENABLE	0x01
 
 #define CIR_WAKE_ENABLE_BIT	0x08
+#define CIR_INTR_MOUSE_IRQ_BIT	0x80
 #define PME_INTR_CIR_PASS_BIT	0x08
 
 /* w83677hg CIR pin config */
